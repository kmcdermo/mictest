################################################################
# Build notes
################################################################

# Requires a recent gcc, e.g.:
#   . /opt/rh/devtoolset-2/enable
# This is also needed for icc as it uses gcc headers.

# To build mkFit -- Matriplex Kalman Fit:
# - enable USE_MATRIPEX in section 5,
# - cd mkFit; make (or make -C mkFit).


################################################################
# Configuration section
################################################################

# 0. Use gcc-5 from MacPorts on OSX
# OSXGCC5    := yes
# To keep Dan's version working
# TBB_PREFIX := tbb

# 1. Use ROOT or not (never used on MIC)
# Comment out to disable root ("yes" is not relevant)
WITH_ROOT := yes

# 2. Use gcc (clang by default on mac) or icc
# Comment out to force using standard c++. For mic only icc can be used.
ifdef INTEL_LICENSE_FILE
CXX := icc
else ifdef OSXGCC5
CXX := c++-mp-5
endif

# 2.1 Use nvcc to compile cuda code
# CUDA compiler
NV := nvcc
# Comment out to compile for CPU
# USE_CUDA := -DUSE_CUDA

# 3. Optimization
# -O3 implies vectorization and simd (but not AVX)
OPT := -O3 -g

# 4. Vectorization settings
VEC_GCC  := # -mavx # -fopt-info-vec
VEC_ICC  := -mavx
VEC_MIC  := -mmic

# 5. Matriplex, intrinsics, vtune
# Matriplex is required for build in mkFit/
# Comment-out for matriplex, intrinsics (supported for MIC and AVX)
USE_MATRIPLEX  := -DUSE_MATRIPLEX
USE_INTRINSICS := -DMPLEX_USE_INTRINSICS
# To enforce given vector size (does not work with intrinsics!)
# USE_INTRINSICS := -DMPT_SIZE=1

USE_VTUNE_NOTIFY := yes

# 6. MIC stuff is built when icc is the chosen compiler.
# MIC build is always done without root.
# Need to build root on MIC and figure out how to deploy it there.

# 7. OSX hack (is there a good way to detect clang?)
# MT needs this on OSX-10.8, c++ -v
#    Apple LLVM version 5.1 (clang-503.0.40) (based on LLVM 3.4svn)
# OSX_CXXFLAGS := -stdlib=libc++
# And with gcc-4.8.1 from cms we need this
# OSX_LDFLAGS  := -lstdc++
#
# Note: there is a problem building with USE_MATRIPLEX on as there
# was no __builtin_assume_aligned support in clang until recently:
#   http://reviews.llvm.org/rL217349
# It will probably take a while before this gets to osx / xcode.
# If somebody is willing to test this we can try without this
# but it was giving 50% speedup on icc.

# 8. Use USolids Geometry (turn off for a trivial cylinder)
#WITH_USOLIDS := yes

# 9. Check track state propagation for success, turns on simple
# checks of filter convergence
USE_STATE_VALIDITY_CHECKS := -DCHECKSTATEVALID

# 10. Turn on multiple scattering
#USE_SCATTERING := -DSCATTERING

# 11. In track building, use linear interpolation across a
# a volume instead of using the geometry
USE_LINEAR_INTERPOLATION := -DLINEARINTERP

# 12. Use built tracks for fitting, comment out to fit sim tracks
ENDTOEND := -DENDTOEND

# 13. Intel Threading Building Blocks.  With icc uses system
# TBB, otherwise requires a local installation, and paths will
# have to be adjusted.
WITH_TBB := yes

# 14. Use for eta-phi segmentation
USE_ETA_SEGMENTATION := -DETASEG

# 15. Generate flat in eta (originally just flat in pz)
GEN_FLAT_ETA := -DGENFLATETA

# 16. Use inward fit in Conformal fit + final KF Fit
INWARD_FIT := -DINWARDFIT

# 17. Super debug mode --> allows really deep exploration of all props/updates etc with single track events, no skipping, in SMatrix, "yes" is irrevelant
#SUPER_DEBUG := yes

################################################################
# Derived settings
################################################################

CPPFLAGS := -I. ${USE_MATRIPLEX} ${USE_INTRINSICS} ${USE_CUDA} -std=c++11
CXXFLAGS := ${OPT} ${OSX_CXXFLAGS}

LDFLAGS_HOST :=
LDFLAGS_MIC  :=

CPPFLAGS += ${USE_STATE_VALIDITY_CHECKS} ${USE_SCATTERING} ${USE_LINEAR_INTERPOLATION} ${ENDTOEND} ${USE_ETA_SEGMENTATION} ${INWARD_FIT} ${GEN_FLAT_ETA}

ifdef USE_VTUNE_NOTIFY
ifdef VTUNE_AMPLIFIER_XE_2016_DIR
CPPFLAGS += -I$(VTUNE_AMPLIFIER_XE_2016_DIR)/include -DUSE_VTUNE_PAUSE
LDFLAGS_HOST += -L$(VTUNE_AMPLIFIER_XE_2016_DIR)/lib64 -littnotify
LDFLAGS_MIC  += -L$(VTUNE_AMPLIFIER_XE_2016_DIR)/bin64/k1om -littnotify
endif
endif

ifneq ($(CXX),icc)
  #CXXFLAGS += -Wall -Wno-unknown-pragmas
endif

ifeq ($(CXX),icc)
  VEC_HOST := ${VEC_ICC}
  CXXFLAGS += -qopt-report
else
  VEC_HOST := ${VEC_GCC}
endif

ifdef USE_MATRIPLEX
ifeq ($(CXX),icc)
  CXXFLAGS += -openmp
  LDFLAGS  += -openmp
else
  CXXFLAGS += -fopenmp
  LDFLAGS  += -fopenmp
endif
endif

ifdef WITH_USOLIDS
  CPPFLAGS += -DWITH_USOLIDS
  LIBUSOLIDS := USolids-host/libusolids.a
  LIBUSOLIDS_MIC := USolids-mic/libusolids.a
  CMAKEFLAGS := -DCMAKE_CXX_COMPILER:STRING=${CXX} -DCMAKE_CXX_FLAGS:STRING="${CXXFLAGS} ${VEC_HOST}"
  CMAKEFLAGS_MIC := -DCMAKE_CXX_COMPILER:STRING=${CXX} -DCMAKE_CXX_FLAGS:STRING="${CXXFLAGS} ${VEC_MIC}"
endif

ifdef CMSSW_BASE
  CPPFLAGS += -I$(shell cd $$CMSSW_BASE && scram tool tag tbb INCLUDE)
  LDFLAGS += -L$(shell cd $$CMSSW_BASE && scram tool tag tbb LIBDIR)
endif

ifdef WITH_TBB
  # icc finds tbb in its own installation
  ifneq ($(CXX),icc)
    ifdef TBB_PREFIX
      CPPFLAGS += -I${TBB_PREFIX}/include
      LDFLAGS  += -L${TBB_PREFIX}/lib -rpath ${TBB_PREFIX}/lib
    else ifdef OSXGCC5
      CPPFLAGS += -I/opt/local/include
      LDFLAGS  += -L/opt/local/lib
    # else use the system version
    endif
  endif
  CPPFLAGS += -DTBB
  LDFLAGS  += -ltbb
endif

CPPFLAGS_NO_ROOT := ${CPPFLAGS} -DNO_ROOT
LDFLAGS_NO_ROOT  := ${LDFLAGS}

ifdef WITH_ROOT
  CPPFLAGS += $(shell root-config --cflags)
  LDFLAGS  += $(shell root-config --libs)
else
  CPPFLAGS += -DNO_ROOT
endif

ifdef SUPER_DEBUG
  CPPFLAGS := -I. -DCHECKSTATEVALID -DLINEARINTERP -DETASEG -DINWARDFIT -DGENFLATETA $(shell root-config --cflags)
  CXXFLAGS := -O3 -g
  LDFLAGS  := $(shell root-config --libs)
endif

################################################################
# Dependency generation
################################################################

DEPEND_TGTS = -MQ '$(patsubst %.d,%.o,$@)'

ifeq (${CXX},icc)
  DEPEND_TGTS += -MQ '$(patsubst %.d,%.om,$@)'
endif

# With icc use gcc for dependency generation. Check if this is still true with icc-16.
ifeq ($(CXX),icc)
  MAKEDEPEND = gcc    -MM -MG ${DEPEND_TGTS} ${CPPFLAGS}
else
  MAKEDEPEND = ${CXX} -MM -MG ${DEPEND_TGTS} ${CPPFLAGS}
endif

%.d: %.cc
	${MAKEDEPEND} -o $@ $<
